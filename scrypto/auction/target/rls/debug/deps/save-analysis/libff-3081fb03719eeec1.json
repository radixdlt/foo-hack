{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1","program":"/Users/codefoo/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","ff","--edition=2018","/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=3081fb03719eeec1","-C","extra-filename=-3081fb03719eeec1","--out-dir","/Users/codefoo/Desktop/RustStuff/foo-hack/scrypto/auction/target/rls/debug/deps","-L","dependency=/Users/codefoo/Desktop/RustStuff/foo-hack/scrypto/auction/target/rls/debug/deps","--extern","rand_core=/Users/codefoo/Desktop/RustStuff/foo-hack/scrypto/auction/target/rls/debug/deps/librand_core-7885d9c885e05857.rmeta","--extern","subtle=/Users/codefoo/Desktop/RustStuff/foo-hack/scrypto/auction/target/rls/debug/deps/libsubtle-9da77050f7ebd6d9.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/codefoo/.rustup/toolchains/stable-aarch64-apple-darwin"],"output":"/Users/codefoo/Desktop/RustStuff/foo-hack/scrypto/auction/target/rls/debug/deps/libff-3081fb03719eeec1.rmeta"},"prelude":{"crate_id":{"name":"ff","disambiguator":[16602344427188125740,0]},"crate_root":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src","external_crates":[{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[8278583129772197859,0]}},{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[14913712660212466740,0]}},{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[169217235897429410,0]}},{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","num":4,"id":{"name":"subtle","disambiguator":[7554292207942428633,0]}},{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","num":5,"id":{"name":"rand_core","disambiguator":[6339594233383922311,0]}}],"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":0,"byte_end":9358,"line_start":1,"line_end":298,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":299,"byte_end":300,"line_start":13,"line_end":13,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":0,"byte_end":9358,"line_start":1,"line_end":298,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":82}],"decl_id":null,"docs":" This crate provides traits for working with finite fields.\n","sig":null,"attributes":[{"value":"/ This crate provides traits for working with finite fields.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":0,"byte_end":62,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"no_std","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":118,"byte_end":128,"line_start":4,"line_end":4,"column_start":1,"column_end":11}},{"value":"deny(broken_intra_doc_links)","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":168,"byte_end":200,"line_start":6,"line_end":6,"column_start":1,"column_end":33}},{"value":"forbid(unsafe_code)","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":201,"byte_end":224,"line_start":7,"line_end":7,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":11},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":11186,"byte_end":11199,"line_start":58,"line_end":58,"column_start":12,"column_end":25},"name":"BatchInverter","qualname":"::batch::BatchInverter","value":"BatchInverter {  }","parent":null,"children":[],"decl_id":null,"docs":" A non-allocating batch inverter.\n","sig":null,"attributes":[{"value":"/ A non-allocating batch inverter.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":11138,"byte_end":11174,"line_start":57,"line_end":57,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":11635,"byte_end":11663,"line_start":71,"line_end":71,"column_start":12,"column_end":40},"name":"invert_with_external_scratch","qualname":"<BatchInverter>::invert_with_external_scratch","value":"pub fn invert_with_external_scratch<F>(&mut [F], &mut [F]) -> F where\nF: Field + ConstantTimeEq","parent":null,"children":[],"decl_id":null,"docs":" Inverts each field element in `elements` (when nonzero). Zero-valued elements are\n left as zero.","sig":null,"attributes":[{"value":"/ Inverts each field element in `elements` (when nonzero). Zero-valued elements are","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":11229,"byte_end":11314,"line_start":61,"line_end":61,"column_start":5,"column_end":90}},{"value":"/ left as zero.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":11319,"byte_end":11336,"line_start":62,"line_end":62,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":11341,"byte_end":11344,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ - `scratch_space` is a slice of field elements that can be freely overwritten.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":11349,"byte_end":11431,"line_start":64,"line_end":64,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":11436,"byte_end":11439,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ Returns the inverse of the product of all nonzero field elements.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":11444,"byte_end":11513,"line_start":66,"line_end":66,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":11518,"byte_end":11521,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":11526,"byte_end":11538,"line_start":68,"line_end":68,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":11543,"byte_end":11546,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ This function will panic if `elements.len() != scratch_space.len()`.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":11551,"byte_end":11623,"line_start":70,"line_end":70,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":12821,"byte_end":12849,"line_start":102,"line_end":102,"column_start":12,"column_end":40},"name":"invert_with_internal_scratch","qualname":"<BatchInverter>::invert_with_internal_scratch","value":"pub fn invert_with_internal_scratch<F, T, TE, TS>(&mut [T], TE, TS) -> F where\nF: Field + ConstantTimeEq, TE: Fn(&mut T) -> &mut F, TS: Fn(&mut T) -> &mut F","parent":null,"children":[],"decl_id":null,"docs":" Inverts each field element in `items` (when nonzero). Zero-valued elements are\n left as zero.","sig":null,"attributes":[{"value":"/ Inverts each field element in `items` (when nonzero). Zero-valued elements are","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":12440,"byte_end":12522,"line_start":95,"line_end":95,"column_start":5,"column_end":87}},{"value":"/ left as zero.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":12527,"byte_end":12544,"line_start":96,"line_end":96,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":12549,"byte_end":12552,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ - `element` is a function that extracts the element to be inverted from `items`.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":12557,"byte_end":12641,"line_start":98,"line_end":98,"column_start":5,"column_end":89}},{"value":"/ - `scratch_space` is a function that extracts the scratch space from `items`.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":12646,"byte_end":12727,"line_start":99,"line_end":99,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":12732,"byte_end":12735,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Returns the inverse of the product of all nonzero field elements.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":12740,"byte_end":12809,"line_start":101,"line_end":101,"column_start":5,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":62},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":993,"byte_end":998,"line_start":36,"line_end":36,"column_start":11,"column_end":16},"name":"Field","qualname":"::Field","value":"Field: Sized + Eq + Copy + Clone + Default + Send + Sync + fmt::Debug + 'static +\nConditionallySelectable + ConstantTimeEq + Add<Output = Self> + Sub<Output =\nSelf> + Mul<Output = Self> + Neg<Output = Self> + for<'a> Add<&'a Self, Output\n= Self> + for<'a> Mul<&'a Self, Output = Self> + for<'a> Sub<&'a Self, Output\n= Self> + MulAssign + AddAssign + SubAssign + for<'a> MulAssign<&'a Self> +\nfor<'a> AddAssign<&'a Self> + for<'a> SubAssign<&'a Self>","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"decl_id":null,"docs":" This trait represents an element of a field.\n","sig":null,"attributes":[{"value":"/ This trait represents an element of a field.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":934,"byte_end":982,"line_start":35,"line_end":35,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1629,"byte_end":1635,"line_start":63,"line_end":63,"column_start":8,"column_end":14},"name":"random","qualname":"::Field::random","value":"pub fn random<impl RngCore: RngCore>(impl RngCore) -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Returns an element chosen uniformly at random using a user-provided RNG.\n","sig":null,"attributes":[{"value":"/ Returns an element chosen uniformly at random using a user-provided RNG.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1545,"byte_end":1621,"line_start":62,"line_end":62,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1742,"byte_end":1746,"line_start":66,"line_end":66,"column_start":8,"column_end":12},"name":"zero","qualname":"::Field::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Returns the zero element of the field, the additive identity.\n","sig":null,"attributes":[{"value":"/ Returns the zero element of the field, the additive identity.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1669,"byte_end":1734,"line_start":65,"line_end":65,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1841,"byte_end":1844,"line_start":69,"line_end":69,"column_start":8,"column_end":11},"name":"one","qualname":"::Field::one","value":"pub fn one() -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Returns the one element of the field, the multiplicative identity.\n","sig":null,"attributes":[{"value":"/ Returns the one element of the field, the multiplicative identity.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1763,"byte_end":1833,"line_start":68,"line_end":68,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1911,"byte_end":1918,"line_start":72,"line_end":72,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::Field::is_zero","value":"pub fn is_zero(&Self) -> Choice","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Returns true iff this element is zero.\n","sig":null,"attributes":[{"value":"/ Returns true iff this element is zero.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1861,"byte_end":1903,"line_start":71,"line_end":71,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2232,"byte_end":2247,"line_start":82,"line_end":82,"column_start":8,"column_end":23},"name":"is_zero_vartime","qualname":"::Field::is_zero_vartime","value":"pub fn is_zero_vartime(&Self) -> bool","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Returns true iff this element is zero.","sig":null,"attributes":[{"value":"/ Returns true iff this element is zero.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1983,"byte_end":2025,"line_start":76,"line_end":76,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2030,"byte_end":2033,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ # Security","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2038,"byte_end":2052,"line_start":78,"line_end":78,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2057,"byte_end":2060,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ This method provides **no** constant-time guarantees. Implementors of the","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2065,"byte_end":2142,"line_start":80,"line_end":80,"column_start":5,"column_end":82}},{"value":"/ `Field` trait **may** optimise this method using non-constant-time logic.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2147,"byte_end":2224,"line_start":81,"line_end":81,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2355,"byte_end":2361,"line_start":88,"line_end":88,"column_start":8,"column_end":14},"name":"square","qualname":"::Field::square","value":"pub fn square(&Self) -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Squares this element.\n","sig":null,"attributes":[{"value":"/ Squares this element.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2306,"byte_end":2331,"line_start":86,"line_end":86,"column_start":5,"column_end":30}},{"value":"must_use","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2336,"byte_end":2347,"line_start":87,"line_end":87,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2430,"byte_end":2434,"line_start":92,"line_end":92,"column_start":8,"column_end":12},"name":"cube","qualname":"::Field::cube","value":"pub fn cube(&Self) -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Cubes this element.\n","sig":null,"attributes":[{"value":"/ Cubes this element.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2383,"byte_end":2406,"line_start":90,"line_end":90,"column_start":5,"column_end":28}},{"value":"must_use","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2411,"byte_end":2422,"line_start":91,"line_end":91,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2541,"byte_end":2547,"line_start":98,"line_end":98,"column_start":8,"column_end":14},"name":"double","qualname":"::Field::double","value":"pub fn double(&Self) -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Doubles this element.\n","sig":null,"attributes":[{"value":"/ Doubles this element.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2492,"byte_end":2517,"line_start":96,"line_end":96,"column_start":5,"column_end":30}},{"value":"must_use","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2522,"byte_end":2533,"line_start":97,"line_end":97,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2673,"byte_end":2679,"line_start":102,"line_end":102,"column_start":8,"column_end":14},"name":"invert","qualname":"::Field::invert","value":"pub fn invert(&Self) -> CtOption<Self>","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Computes the multiplicative inverse of this element,\n failing if the element is zero.\n","sig":null,"attributes":[{"value":"/ Computes the multiplicative inverse of this element,","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2569,"byte_end":2625,"line_start":100,"line_end":100,"column_start":5,"column_end":61}},{"value":"/ failing if the element is zero.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2630,"byte_end":2665,"line_start":101,"line_end":101,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2804,"byte_end":2808,"line_start":106,"line_end":106,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::Field::sqrt","value":"pub fn sqrt(&Self) -> CtOption<Self>","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Returns the square root of the field element, if it is\n quadratic residue.\n","sig":null,"attributes":[{"value":"/ Returns the square root of the field element, if it is","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2711,"byte_end":2769,"line_start":104,"line_end":104,"column_start":5,"column_end":63}},{"value":"/ quadratic residue.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2774,"byte_end":2796,"line_start":105,"line_end":105,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":3106,"byte_end":3117,"line_start":113,"line_end":113,"column_start":8,"column_end":19},"name":"pow_vartime","qualname":"::Field::pow_vartime","value":"pub fn pow_vartime<S: AsRef<[u64]>>(&Self, S) -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Exponentiates `self` by `exp`, where `exp` is a little-endian order\n integer exponent.","sig":null,"attributes":[{"value":"/ Exponentiates `self` by `exp`, where `exp` is a little-endian order","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2840,"byte_end":2911,"line_start":108,"line_end":108,"column_start":5,"column_end":76}},{"value":"/ integer exponent.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2916,"byte_end":2937,"line_start":109,"line_end":109,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2942,"byte_end":2945,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ **This operation is variable time with respect to the exponent.** If the","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":2950,"byte_end":3026,"line_start":111,"line_end":111,"column_start":5,"column_end":81}},{"value":"/ exponent is fixed, this operation is effectively constant time.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":3031,"byte_end":3098,"line_start":112,"line_end":112,"column_start":5,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":82},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":3521,"byte_end":3531,"line_start":130,"line_end":130,"column_start":11,"column_end":21},"name":"PrimeField","qualname":"::PrimeField","value":"PrimeField: Field + From<u64>","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94}],"decl_id":null,"docs":" This represents an element of a prime field.\n","sig":null,"attributes":[{"value":"/ This represents an element of a prime field.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":3462,"byte_end":3510,"line_start":129,"line_end":129,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":83},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":3659,"byte_end":3663,"line_start":133,"line_end":133,"column_start":10,"column_end":14},"name":"Repr","qualname":"::PrimeField::Repr","value":"type Repr: Copy + Default + Send + Sync + 'static + AsRef<[u8]> + AsMut<[u8]>;","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" The prime field can be converted back and forth into this binary\n representation.\n","sig":null,"attributes":[{"value":"/ The prime field can be converted back and forth into this binary","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":3557,"byte_end":3625,"line_start":131,"line_end":131,"column_start":5,"column_end":73}},{"value":"/ representation.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":3630,"byte_end":3649,"line_start":132,"line_end":132,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":3984,"byte_end":4000,"line_start":141,"line_end":141,"column_start":8,"column_end":24},"name":"from_str_vartime","qualname":"::PrimeField::from_str_vartime","value":"pub fn from_str_vartime(&str) -> Option<Self>","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Interpret a string of numbers as a (congruent) prime field element.\n Does not accept unnecessary leading zeroes or a blank string.","sig":null,"attributes":[{"value":"/ Interpret a string of numbers as a (congruent) prime field element.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":3738,"byte_end":3809,"line_start":135,"line_end":135,"column_start":5,"column_end":76}},{"value":"/ Does not accept unnecessary leading zeroes or a blank string.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":3814,"byte_end":3879,"line_start":136,"line_end":136,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":3884,"byte_end":3887,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ # Security","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":3892,"byte_end":3906,"line_start":138,"line_end":138,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":3911,"byte_end":3914,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ This method provides **no** constant-time guarantees.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":3919,"byte_end":3976,"line_start":140,"line_end":140,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5170,"byte_end":5179,"line_start":185,"line_end":185,"column_start":8,"column_end":17},"name":"from_repr","qualname":"::PrimeField::from_repr","value":"pub fn from_repr(Self::Repr) -> CtOption<Self>","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Attempts to convert a byte representation of a field element into an element of\n this prime field, failing if the input is not canonical (is not smaller than the\n field's modulus).","sig":null,"attributes":[{"value":"/ Attempts to convert a byte representation of a field element into an element of","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":4827,"byte_end":4910,"line_start":179,"line_end":179,"column_start":5,"column_end":88}},{"value":"/ this prime field, failing if the input is not canonical (is not smaller than the","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":4915,"byte_end":4999,"line_start":180,"line_end":180,"column_start":5,"column_end":89}},{"value":"/ field's modulus).","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5004,"byte_end":5025,"line_start":181,"line_end":181,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5030,"byte_end":5033,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ The byte representation is interpreted with the same endianness as elements","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5038,"byte_end":5117,"line_start":183,"line_end":183,"column_start":5,"column_end":84}},{"value":"/ returned by [`PrimeField::to_repr`].","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5122,"byte_end":5162,"line_start":184,"line_end":184,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5769,"byte_end":5786,"line_start":198,"line_end":198,"column_start":8,"column_end":25},"name":"from_repr_vartime","qualname":"::PrimeField::from_repr_vartime","value":"pub fn from_repr_vartime(Self::Repr) -> Option<Self>","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Attempts to convert a byte representation of a field element into an element of\n this prime field, failing if the input is not canonical (is not smaller than the\n field's modulus).","sig":null,"attributes":[{"value":"/ Attempts to convert a byte representation of a field element into an element of","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5222,"byte_end":5305,"line_start":187,"line_end":187,"column_start":5,"column_end":88}},{"value":"/ this prime field, failing if the input is not canonical (is not smaller than the","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5310,"byte_end":5394,"line_start":188,"line_end":188,"column_start":5,"column_end":89}},{"value":"/ field's modulus).","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5399,"byte_end":5420,"line_start":189,"line_end":189,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5425,"byte_end":5428,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ The byte representation is interpreted with the same endianness as elements","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5433,"byte_end":5512,"line_start":191,"line_end":191,"column_start":5,"column_end":84}},{"value":"/ returned by [`PrimeField::to_repr`].","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5517,"byte_end":5557,"line_start":192,"line_end":192,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5562,"byte_end":5565,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ # Security","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5570,"byte_end":5584,"line_start":194,"line_end":194,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5589,"byte_end":5592,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ This method provides **no** constant-time guarantees. Implementors of the","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5597,"byte_end":5674,"line_start":196,"line_end":196,"column_start":5,"column_end":82}},{"value":"/ `PrimeField` trait **may** optimise this method using non-constant-time logic.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5679,"byte_end":5761,"line_start":197,"line_end":197,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":6142,"byte_end":6149,"line_start":207,"line_end":207,"column_start":8,"column_end":15},"name":"to_repr","qualname":"::PrimeField::to_repr","value":"pub fn to_repr(&Self) -> Self::Repr","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Converts an element of the prime field into the standard byte representation for\n this field.","sig":null,"attributes":[{"value":"/ Converts an element of the prime field into the standard byte representation for","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5871,"byte_end":5955,"line_start":202,"line_end":202,"column_start":5,"column_end":89}},{"value":"/ this field.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5960,"byte_end":5975,"line_start":203,"line_end":203,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5980,"byte_end":5983,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ The endianness of the byte representation is implementation-specific. Generic","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":5988,"byte_end":6069,"line_start":205,"line_end":205,"column_start":5,"column_end":86}},{"value":"/ encodings of field elements should be treated as opaque.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":6074,"byte_end":6134,"line_start":206,"line_end":206,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":6226,"byte_end":6232,"line_start":210,"line_end":210,"column_start":8,"column_end":14},"name":"is_odd","qualname":"::PrimeField::is_odd","value":"pub fn is_odd(&Self) -> Choice","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Returns true iff this element is odd.\n","sig":null,"attributes":[{"value":"/ Returns true iff this element is odd.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":6177,"byte_end":6218,"line_start":209,"line_end":209,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":6328,"byte_end":6335,"line_start":214,"line_end":214,"column_start":8,"column_end":15},"name":"is_even","qualname":"::PrimeField::is_even","value":"pub fn is_even(&Self) -> Choice","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Returns true iff this element is even.\n","sig":null,"attributes":[{"value":"/ Returns true iff this element is even.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":6256,"byte_end":6298,"line_start":212,"line_end":212,"column_start":5,"column_end":47}},{"value":"inline(always)","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":6303,"byte_end":6320,"line_start":213,"line_end":213,"column_start":5,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":90},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":6467,"byte_end":6475,"line_start":219,"line_end":219,"column_start":11,"column_end":19},"name":"NUM_BITS","qualname":"::PrimeField::NUM_BITS","value":"u32","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" How many bits are needed to represent an element of this field.\n","sig":null,"attributes":[{"value":"/ How many bits are needed to represent an element of this field.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":6389,"byte_end":6456,"line_start":218,"line_end":218,"column_start":5,"column_end":72}}]},{"kind":"Const","id":{"krate":0,"index":91},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":6629,"byte_end":6637,"line_start":224,"line_end":224,"column_start":11,"column_end":19},"name":"CAPACITY","qualname":"::PrimeField::CAPACITY","value":"u32","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" How many bits of information can be reliably stored in the field element.","sig":null,"attributes":[{"value":"/ How many bits of information can be reliably stored in the field element.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":6487,"byte_end":6564,"line_start":221,"line_end":221,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":6569,"byte_end":6572,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ This is usually `Self::NUM_BITS - 1`.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":6577,"byte_end":6618,"line_start":223,"line_end":223,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":7061,"byte_end":7085,"line_start":235,"line_end":235,"column_start":8,"column_end":32},"name":"multiplicative_generator","qualname":"::PrimeField::multiplicative_generator","value":"pub fn multiplicative_generator() -> Self","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Returns a fixed multiplicative generator of `modulus - 1` order. This element must\n also be a quadratic nonresidue.","sig":null,"attributes":[{"value":"/ Returns a fixed multiplicative generator of `modulus - 1` order. This element must","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":6649,"byte_end":6735,"line_start":226,"line_end":226,"column_start":5,"column_end":91}},{"value":"/ also be a quadratic nonresidue.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":6740,"byte_end":6775,"line_start":227,"line_end":227,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":6780,"byte_end":6783,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ It can be calculated using [SageMath] as `GF(modulus).primitive_element()`.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":6788,"byte_end":6867,"line_start":229,"line_end":229,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":6872,"byte_end":6875,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Implementations of this method MUST ensure that this is the generator used to","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":6880,"byte_end":6961,"line_start":231,"line_end":231,"column_start":5,"column_end":86}},{"value":"/ derive `Self::root_of_unity`.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":6966,"byte_end":6999,"line_start":232,"line_end":232,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":7004,"byte_end":7007,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ [SageMath]: https://www.sagemath.org/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":7012,"byte_end":7053,"line_start":234,"line_end":234,"column_start":5,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":93},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":7315,"byte_end":7316,"line_start":241,"line_end":241,"column_start":11,"column_end":12},"name":"S","qualname":"::PrimeField::S","value":"u32","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" An integer `s` satisfying the equation `2^s * t = modulus - 1` with `t` odd.","sig":null,"attributes":[{"value":"/ An integer `s` satisfying the equation `2^s * t = modulus - 1` with `t` odd.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":7102,"byte_end":7182,"line_start":237,"line_end":237,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":7187,"byte_end":7190,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ This is the number of leading zero bits in the little-endian bit representation of","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":7195,"byte_end":7281,"line_start":239,"line_end":239,"column_start":5,"column_end":91}},{"value":"/ `modulus - 1`.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":7286,"byte_end":7304,"line_start":240,"line_end":240,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":7514,"byte_end":7527,"line_start":247,"line_end":247,"column_start":8,"column_end":21},"name":"root_of_unity","qualname":"::PrimeField::root_of_unity","value":"pub fn root_of_unity() -> Self","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Returns the `2^s` root of unity.","sig":null,"attributes":[{"value":"/ Returns the `2^s` root of unity.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":7328,"byte_end":7364,"line_start":243,"line_end":243,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":7369,"byte_end":7372,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ It can be calculated by exponentiating `Self::multiplicative_generator` by `t`,","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":7377,"byte_end":7460,"line_start":245,"line_end":245,"column_start":5,"column_end":88}},{"value":"/ where `t = (modulus - 1) >> Self::S`.","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":7465,"byte_end":7506,"line_start":246,"line_end":246,"column_start":5,"column_end":46}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":11209,"byte_end":11222,"line_start":60,"line_end":60,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":15}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/batch.rs","byte_start":11209,"byte_end":11222,"line_start":60,"line_end":60,"column_start":6,"column_end":19},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":11},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1004,"byte_end":1009,"line_start":37,"line_end":37,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3062},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1016,"byte_end":1018,"line_start":38,"line_end":38,"column_start":7,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":2714},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1025,"byte_end":1029,"line_start":39,"line_end":39,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":3067},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1036,"byte_end":1041,"line_start":40,"line_end":40,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":2679},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1048,"byte_end":1055,"line_start":41,"line_end":41,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":1,"index":3035},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1062,"byte_end":1066,"line_start":42,"line_end":42,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":3057},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1073,"byte_end":1077,"line_start":43,"line_end":43,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":3069},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1089,"byte_end":1094,"line_start":44,"line_end":44,"column_start":12,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":9687},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1115,"byte_end":1138,"line_start":46,"line_end":46,"column_start":7,"column_end":30},"kind":"SuperTrait","from":{"krate":4,"index":65},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1145,"byte_end":1159,"line_start":47,"line_end":47,"column_start":7,"column_end":21},"kind":"SuperTrait","from":{"krate":4,"index":57},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1166,"byte_end":1169,"line_start":48,"line_end":48,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3125},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1191,"byte_end":1194,"line_start":49,"line_end":49,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3130},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1216,"byte_end":1219,"line_start":50,"line_end":50,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3135},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1241,"byte_end":1244,"line_start":51,"line_end":51,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3152},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1274,"byte_end":1277,"line_start":52,"line_end":52,"column_start":15,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":3125},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1317,"byte_end":1320,"line_start":53,"line_end":53,"column_start":15,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":3135},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1360,"byte_end":1363,"line_start":54,"line_end":54,"column_start":15,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":3130},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1395,"byte_end":1404,"line_start":55,"line_end":55,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":3164},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1411,"byte_end":1420,"line_start":56,"line_end":56,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1427,"byte_end":1436,"line_start":57,"line_end":57,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":3160},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1451,"byte_end":1460,"line_start":58,"line_end":58,"column_start":15,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":3164},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1485,"byte_end":1494,"line_start":59,"line_end":59,"column_start":15,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":1519,"byte_end":1528,"line_start":60,"line_end":60,"column_start":15,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":3160},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":3533,"byte_end":3538,"line_start":130,"line_end":130,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":62},"to":{"krate":0,"index":82}},{"span":{"file_name":"/Users/codefoo/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.11.1/src/lib.rs","byte_start":3541,"byte_end":3545,"line_start":130,"line_end":130,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2963},"to":{"krate":0,"index":82}}]}